# CircleCI 2.1 configuration file for https://github.com/zxdavb/geniushub-client
# Check https://circleci.com/docs/2.0/language-python/ for more details

version: 2.1


jobs:
  build:
    docker:  # see: at: https://hub.docker.com/r/circleci/python/
      - image: circleci/python:3.9.7
    working_directory: ~/working_directory
    steps: # steps that comprise the `build` job
      - checkout # check out source code to working directory
      # - run: sudo chown -R circleci:circleci /usr/local/bin
      # - run: sudo chown -R circleci:circleci /usr/local/lib/python*/site-packages
      - run: sudo pip install pylint
      - run: mkdir test-results


  check_lint:
    docker:
      - image: circleci/python:3.9.7
    steps:
      - checkout
      - run:
          command: |
            sudo pip install -r requirements-dev.txt
            mkdir test-results
      - run:
          name: "Check formatting 1: black"
          command: |
            black --diff --check *client.py
            black --diff --check ramses*
      - run:
          name: "Check formatting 2: isort"
          command: |
            isort --check --diff *client.py
            isort --check --diff ramses*
      - store_test_results: # Upload test results for display in Test Summary: https://circleci.com/docs/2.0/collect-test-data/
          path: test-results
      - store_artifacts: # Upload test summary for display in Artifacts: https://circleci.com/docs/2.0/artifacts/
          path: artifacts
          destination: coverage


  run_pytest:
    docker:
      - image: circleci/python:3.9.7
    steps:
      - checkout
      - run:
          command: |
            sudo pip install -r requirements.txt
            sudo pip install -r requirements-dev.txt
            sudo pip install -e .
      - run:
          name: "Run pytest"
          command: |
            pytest -v


  deploy:
    docker:
      - image: circleci/python:3.9.7
    steps:
      - checkout
      # - run: sudo chown -R circleci:circleci /usr/local/bin
      # - run: sudo chown -R circleci:circleci /usr/local/lib/python*/site-packages
      - run:
          name: Install dependencies
          command: |
            sudo pip install -r requirements.txt
            sudo pip install twine
      - run:
          name: Verify git tag vs. package version
          command: python setup.py verify  # NOTE: $CIRCLE_TAG is not available to su
      - run:
          name: Clear the DEV_MODE flags, if set
          command: |
            sed -i -e '/__dev_mode__ =/ s/= .*/= False/' ramses_rf/const.py
            sed -i -e '/__dev_mode__ =/ s/= .*/= False/' ramses_rf/protocol/const.py
      - run:
          name: Clear any DEV_HACK_* flags, if set
          command: |
            sed -i -e '/DEV_HACK_REGEX =/ s/= .*/= False/' ramses_rf/protocol/transport.py
      - run:
          name: Build the package
          command: |
            sudo python setup.py sdist        # create a source distribution
            sudo python setup.py bdist_wheel  # create a wheel
      - run:
          name: Create .pypirc
          command: |
            echo -e "[pypi]                                         " >  ~/.pypirc
            echo -e "  username = __token__                         " >> ~/.pypirc
            echo -e "  password = $PYPI_TOKEN                       " >> ~/.pypirc
      - run:
          name: Upload to PyPi
          command: twine upload -r pypi dist/*


workflows:
  version: 2

  build-and-deploy:
    jobs:
      # - build:
      #     filters: # required since `check_lint` has tag filters AND requires `build`
      #       tags:
      #         only: /.*/
      - check_lint:
          # requires:
          #   - build
          filters: # required since `deploy` has tag filters AND requires `check_lint`
            tags:
              only: /.*/
      - run_pytest:
          # requires:
          #   - build
          filters: # required since `deploy` has tag filters AND requires `check_lint`
            tags:
              only: /.*/
      - deploy:
          requires:
            # - build
            - check_lint
            - run_pytest
          filters:
            tags:
              only: /[0-9]+(\.[0-9]+)*/
            branches:
              ignore: /.*/
