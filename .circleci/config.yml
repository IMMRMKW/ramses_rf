# CircleCI 2.1 configuration file for https://github.com/zxdavb/evohome_rf
# Check https://circleci.com/docs/2.0/language-python/ for more details

version: 2.1


jobs: # A basic unit of work in a run
  build: # runs not using Workflows must have a `build` job as entry point
    # directory where steps are run
    working_directory: ~/working_directory
    docker: # run the steps with Docker
      # CircleCI Python images available at: https://hub.docker.com/r/circleci/python/
      - image: circleci/python:3.7.5
    steps: # steps that comprise the `build` job
      - checkout # check out source code to working directory
      - run: sudo chown -R circleci:circleci /usr/local/bin
      - run: sudo chown -R circleci:circleci /usr/local/lib/python3.7/site-packages
      - run: sudo pip install pylint
      - run: mkdir test-results

  check:
    docker:
      - image: circleci/python:3.7.5
    steps:
      - checkout
      - run:
          command: |
            sudo pip install black
            mkdir test-results
      - run:
          name: Check formatting 1 (black)
          command: |
            . venv/bin/activate
            black --safe --quiet client.py
            black --safe --quiet evohome_rf
      - run:
          name: Check formatting 2 (black)
          command: |
            . venv/bin/activate
            black --diff --check *client.py
            black --diff --check evohome_rf
      # - run:
      #     name: Check formatting (isort)
      #     command: |
      #       . venv/bin/activate
      #       isort --check-only
      - store_test_results: # Upload test results for display in Test Summary: https://circleci.com/docs/2.0/collect-test-data/
          path: test-results
      - store_artifacts: # Upload test summary for display in Artifacts: https://circleci.com/docs/2.0/artifacts/
          path: artifacts
          destination: coverage

  deploy:
    docker:
      - image: circleci/python:3.7.5
    steps:
      - checkout
      - run:
          command: sudo pip install twine
      - run:
          name: Verify git tag vs. package version
          command: python setup.py verify
      - run:
          name: Build the  package
          command: |
            python setup.py sdist        # create a source distribution
            python setup.py bdist_wheel  # create a wheel
      - run:
          name: Create .pypirc
          command: |
            echo -e "[distutils]"                                  >> ~/.pypirc
            echo -e "index-servers="                               >> ~/.pypirc
            echo -e "    pypi"                                     >> ~/.pypirc
            echo -e "    test"                                     >> ~/.pypirc
            echo -e ""                                             >> ~/.pypirc
            echo -e "[pypi]"                                       >> ~/.pypirc
            echo -e "repository = https://upload.pypi.org/legacy/" >> ~/.pypirc
            echo -e "username = $PYPI_USERNAME"                    >> ~/.pypirc
            echo -e "password = $PYPI_PASSWORD"                    >> ~/.pypirc
            echo -e ""                                             >> ~/.pypirc
            echo -e "[test]"                                       >> ~/.pypirc
            echo -e "repository = https://test.pypi.org/legacy/"   >> ~/.pypirc
            echo -e "username = $PYPI_USERNAME"                    >> ~/.pypirc
            echo -e "password = $PYPI_PASSWORD"                    >> ~/.pypirc
            echo -e ""                                             >> ~/.pypirc
      - run:
          name: Upload to PyPi
          command: twine upload -r pypi dist/*

workflows:
  version: 2

  build-and-deploy:
    jobs:
      - build:
          filters: # required since `deploy` has tag filters AND requires `build`
            tags:
              only: /.*/
      - check:
          requires:
            - build
          filters: # required since `deploy` has tag filters AND requires `build`
            tags:
              only: /.*/
      - deploy:
          requires:
            - build
            - check
          filters:
            tags:
              only: /[0-9]+(\.[0-9]+)*/
            branches:
              ignore: /.*/